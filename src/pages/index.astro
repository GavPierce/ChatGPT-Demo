---
import Layout from "../layouts/Layout.astro";
import Card from "../components/Card.astro";
---

<Layout title="Welcome to Astro.">
  <main>
    <h1>Don't <span class="text-gradient">jump</span></h1>

    <ul role="list" class="link-card-grid messages">
      <div class="nes-container is-dark with-title message bot">
        <p class="title">Lieutenant Anderson:</p>
        <p>I've got nothing to live for!</p>
      </div>
    </ul>
    <div class="chat-input">
      <input type="text" placeholder="Type your message..." />
      <button>Send</button>
    </div>
  </main>
</Layout>

<style>
  @import url("https://fonts.googleapis.com/css2?family=Press+Start+2P&display=swap");
  main {
    padding: 2rem;
    width: 100vw;
    height: 100vh;
    color: white;
    font-size: 20px;
    background-color: black;
    line-height: 1.6;
    font-family: "Press Start 2P", system-ui;
  }
  .astro-a {
    position: absolute;
    top: -32px;
    left: 50%;
    transform: translatex(-50%);
    width: 220px;
    height: auto;
    z-index: -1;
  }
  .chat-input {
    position: absolute;
    margin: auto;
    bottom: 10;
  }
  .messages {
    display: flex;
    flex-direction: column;
    height: 60vh;
    overflow-y: auto;
  }
  .message {
    margin-bottom: 2em;
    font-size: 0.7em;
    max-width: 80vw;
  }
  .user {
    align-self: flex-end;
  }
  h1 {
    font-size: 4rem;
    font-weight: 700;
    line-height: 1;
    text-align: center;
    margin-bottom: 1em;
  }
  .text-gradient {
    background-image: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }
  .instructions {
    margin-bottom: 2rem;
    border: 1px solid rgba(var(--accent-light), 25%);
    background: linear-gradient(
      rgba(var(--accent-dark), 66%),
      rgba(var(--accent-dark), 33%)
    );
    padding: 1.5rem;
    border-radius: 8px;
  }
  .instructions code {
    font-size: 0.8em;
    font-weight: bold;
    background: rgba(var(--accent-light), 12%);
    color: rgb(var(--accent-light));
    border-radius: 4px;
    padding: 0.3em 0.4em;
  }
  .instructions strong {
    color: rgb(var(--accent-light));
  }
  input {
    max-width: 50vw;
  }
  // create a breakpoint
    .ul {
    padding-left: 0;
  }
</style>
<script>
  let messageHistory: any[] = [];
  document.addEventListener("DOMContentLoaded", function () {
    var input = document.querySelector(".chat-input input") as HTMLInputElement;

    // Attach event listener to the button
    var button = document.querySelector(
      ".chat-input button"
    ) as HTMLBaseElement;

    button.addEventListener("click", () => {
      messageHistory.push({ role: "user", content: input.value });
      send();
      addUserMessage(input.value);
      input.value = "";
    });

    // Attach event listener to the input for Enter key
    input.addEventListener("keypress", function (event) {
      if (event.key === "Enter") {
        messageHistory.push({ role: "user", content: input.value });
        send();
        addUserMessage(input.value);
        console.log(messageHistory);
        input.value = "";
      }
    });
  });
  async function send() {
    fetch("/api/generate", {
      method: "POST",
      body: JSON.stringify({ message: messageHistory }),
    })
      .then((response) => response.json())
      .then((gResponse) => {
        var chatMessages = document.querySelector(
          ".messages"
        ) as HTMLBodyElement;

        const botMessage = gResponse.message;
        messageHistory.push({ role: "assistant", content: botMessage });

        // Display bot message
        var botMessageElement = document.createElement("div");
        botMessageElement.style.maxWidth = "80vw";
        botMessageElement.style.fontSize = "0.7em";
        botMessageElement.classList.add("nes-container", "is-dark");
        botMessageElement.innerHTML =
          "<p class='title'>Lieutenant Anderson:</p><p>" + botMessage + "</p>";
        chatMessages.appendChild(botMessageElement);

        chatMessages.scrollTop = chatMessages.scrollHeight;
      });
  }
  function addUserMessage(userMessage: string) {
    // Display user message
    var chatMessages = document.querySelector(".messages") as HTMLBodyElement;
    var userMessageElement = document.createElement("div");
    userMessageElement.style.maxWidth = "50vw";
    userMessageElement.style.fontSize = "0.7em";
    userMessageElement.style.alignSelf = "flex-end";
    userMessageElement.classList.add("nes-container", "is-dark", "user");

    userMessageElement.innerHTML =
      "<p class='title'>DETECTIVE</p><p>" + userMessage + "</p>";
    chatMessages.appendChild(userMessageElement);

    chatMessages.scrollTop = chatMessages.scrollHeight;
  }
</script>
<!-- Load the openai.js script after the main script -->
